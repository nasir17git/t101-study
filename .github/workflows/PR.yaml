name: "Terraform_Official"

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  pr_check:
    name: Terraform planner
    runs-on: ubuntu-latest
    outputs: # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      pr: ${{ steps.findPr.outputs.pr }}
      number: ${{ steps.findPr.outputs.number }}

    steps:
      - name: get PR number
        uses: jwalton/gh-find-current-pr@v1
        id: findPr
        if: always() # Pick up events even if the job fails or is canceled.
        with:
          state: open

      - name: PR checker
        env:
          PR: ${{ steps.findPr.outputs.pr }}
        if: ${{ steps.findPr.outputs.pr == '' }}
        run: echo "There's no pr" && exit 1

  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    needs: pr_check

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
