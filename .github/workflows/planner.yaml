on:
  workflow_dispatch:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  GIT_BRANCH_NAME: ${{ github.ref_name }}
  TF_TOKEN_app_terraform_io: ${{ secrets.TFE_TOKEN }} # https://developer.hashicorp.com/terraform/cli/config/config-file#environment-variable-credentials

jobs:
  # pr_check:
  #   name: pr_check
  #   runs-on: ubuntu-latest
  #   outputs: # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
  #     pr: ${{ steps.findPr.outputs.pr }}
  #     number: ${{ steps.findPr.outputs.number }}

  #   steps:
  #     - name: get PR number
  #       uses: jwalton/gh-find-current-pr@v1
  #       id: findPr
  #       if: always() # Pick up events even if the job fails or is canceled.
  #       with:
  #         state: open

  #     - name: PR checker
  #       env:
  #         PR: ${{ steps.findPr.outputs.pr }}
  #       if: ${{ steps.findPr.outputs.pr == '' }}
  #       run: echo "There's no pr" && exit 1

  build:
    name: Terraform planner
    runs-on: ubuntu-latest
    # needs: pr_check

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # - name: Terraform format
      #   id: fmt
      #   run: |
      #     pwd
      #     cd trf_cloud
      #     terraform fmt

      # - name: Terraform init
      #   id: init
      #   run: |
      #     pwd
      #     cd trf_cloud
      #     terraform init

      # - name: Terraform validate
      #   id: validate
      #   run: |
      #     pwd
      #     cd trf_cloud
      #     terraform validate

      # - name: Terraform Plan
      #   id: gha-plan
      #   run: |
      #     cd trf_cloud
      #     terraform plan -no-color
      #   continue-on-error: true

      # - name: check plan outcome
      #   run: |
      #     echo "1"
      #     echo ${{ steps.gha-plan.outcome }}
      #     echo "2"
      #     echo ${{ steps.gha-plan.outputs.stdout }}
      #     echo "3"
      #     echo ${{ steps.gha-plan.outputs }}

      - name: setup-terraform ver
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.9
          terraform_wrapper: true
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: init
        run: |
          pwd
          cd trf_cloud
          terraform init

      - name: plan
        id: plan
        run: |
          cd trf_cloud
          terraform plan -no-color

      - name: get plan result
        id: plan_result
        run: |
          echo "${{ steps.plan.outputs.stdout }}" >> full.txt
          echo "RESULT=$(sed -n '/Plan:/p' full.txt ; sed -n '/No changes./p' full.txt)" >> $GITHUB_ENV
          echo $RESULT

      # - name: comment output on PR
      #   uses: actions/github-script@v6
      #   if: always() && needs.pr_check.outputs.pr
      #   env:
      #     GITHUB_ISSUE_NUMBER: ${{ needs.pr_check.outputs.pr }}
      #   with:
      #     github-token: ${{secrets.GIT_HUB_TOKEN}}
      #     script: | 
      #       const emojiObj = {
      #           'success': ':white_check_mark:',
      #           'failure': ':x:',
      #           'cancelled': ':fast_forward:(cancel)',
      #           'skipped': ':eject_button:(skip)'
      #       }
            
      #       let output = `_${{ github.event.commits[0].message }}_ [${{ steps.sha1.outputs.short }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) ` +
      #         `_Format_ ${emojiObj['${{ steps.fmt.outcome }}']}, ` +
      #         `_Init_ ${emojiObj['${{ steps.init.outcome }}']}, ` + 
      #         `_Validate_ ${emojiObj['${{ steps.validate.outcome }}']}, ` +
      #         `_Plan_ ${emojiObj['${{ steps.plan.outcome }}']} `
      #       if ('${{ steps.plan.outcome }}' == 'success') {
      #         output = `${output}

      #         <details><summary>Show Plan Details</summary>

      #         \`\`\`
      #         ${{ steps.plan.outputs.plan }}
      #         \`\`\`

      #         </details>`
      #       }

      #       await github.rest.issues.createComment({
      #         issue_number: process.env.GITHUB_ISSUE_NUMBER,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1
